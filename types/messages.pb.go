// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: messages.proto

package types

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// the message type, which determines what key/value mean
type IBCPacket_MsgType int32

const (
	IBCPacket_RECEIVE IBCPacket_MsgType = 0
	IBCPacket_RECEIPT IBCPacket_MsgType = 1
	IBCPacket_TIMEOUT IBCPacket_MsgType = 2
	IBCPacket_CLEANUP IBCPacket_MsgType = 3
)

var IBCPacket_MsgType_name = map[int32]string{
	0: "RECEIVE",
	1: "RECEIPT",
	2: "TIMEOUT",
	3: "CLEANUP",
}
var IBCPacket_MsgType_value = map[string]int32{
	"RECEIVE": 0,
	"RECEIPT": 1,
	"TIMEOUT": 2,
	"CLEANUP": 3,
}

func (x IBCPacket_MsgType) String() string {
	return proto.EnumName(IBCPacket_MsgType_name, int32(x))
}
func (IBCPacket_MsgType) EnumDescriptor() ([]byte, []int) { return fileDescriptorMessages, []int{0, 0} }

// IBCPacket sends a proven key/value pair from an IBCQueue.
// Depending on the type of message, we require a certain type
// of key (MessageKey at a given height, or StateKey).
//
// Includes src_chain and src_height to look up the proper
// header to verify the merkle proof.
type IBCPacket struct {
	// chain id it is coming from
	SrcChain string `protobuf:"bytes,1,opt,name=src_chain,json=srcChain,proto3" json:"src_chain,omitempty"`
	// height for the header the proof belongs to
	SrcHeight uint64            `protobuf:"varint,2,opt,name=src_height,json=srcHeight,proto3" json:"src_height,omitempty"`
	MsgType   IBCPacket_MsgType `protobuf:"varint,3,opt,name=msgType,proto3,enum=types.IBCPacket_MsgType" json:"msgType,omitempty"`
	// the proof of the message,
	// includes key and value
	Proof *MerkleProof `protobuf:"bytes,6,opt,name=proof" json:"proof,omitempty"`
}

func (m *IBCPacket) Reset()                    { *m = IBCPacket{} }
func (m *IBCPacket) String() string            { return proto.CompactTextString(m) }
func (*IBCPacket) ProtoMessage()               {}
func (*IBCPacket) Descriptor() ([]byte, []int) { return fileDescriptorMessages, []int{0} }

func (m *IBCPacket) GetSrcChain() string {
	if m != nil {
		return m.SrcChain
	}
	return ""
}

func (m *IBCPacket) GetSrcHeight() uint64 {
	if m != nil {
		return m.SrcHeight
	}
	return 0
}

func (m *IBCPacket) GetMsgType() IBCPacket_MsgType {
	if m != nil {
		return m.MsgType
	}
	return IBCPacket_RECEIVE
}

func (m *IBCPacket) GetProof() *MerkleProof {
	if m != nil {
		return m.Proof
	}
	return nil
}

func init() {
	proto.RegisterType((*IBCPacket)(nil), "types.IBCPacket")
	proto.RegisterEnum("types.IBCPacket_MsgType", IBCPacket_MsgType_name, IBCPacket_MsgType_value)
}

func init() { proto.RegisterFile("messages.proto", fileDescriptorMessages) }

var fileDescriptorMessages = []byte{
	// 231 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x3c, 0x8f, 0x4d, 0x4b, 0xc3, 0x30,
	0x18, 0xc7, 0xcd, 0xe6, 0x56, 0xfb, 0x4c, 0x46, 0xc9, 0x29, 0x28, 0x42, 0xd9, 0x29, 0xa7, 0x1e,
	0xea, 0xd9, 0x83, 0x96, 0x80, 0x05, 0xab, 0x25, 0x74, 0x5e, 0xa5, 0x96, 0xc7, 0x76, 0xcc, 0x9a,
	0x90, 0xe4, 0xb2, 0xef, 0xeb, 0x07, 0x91, 0xa4, 0xb3, 0xc7, 0xdf, 0xff, 0xe5, 0x79, 0x81, 0xed,
	0x88, 0xd6, 0xb6, 0x3d, 0xda, 0x4c, 0x1b, 0xe5, 0x14, 0x5d, 0xb9, 0x93, 0x46, 0x7b, 0x73, 0x3d,
	0xa2, 0x39, 0x7e, 0xe3, 0x24, 0xee, 0x7e, 0x09, 0xc4, 0xe5, 0x53, 0x51, 0xb7, 0xdd, 0x11, 0x1d,
	0xbd, 0x85, 0xd8, 0x9a, 0xee, 0xa3, 0x1b, 0xda, 0xc3, 0x0f, 0x23, 0x29, 0xe1, 0xb1, 0xbc, 0xb2,
	0xa6, 0x2b, 0x3c, 0xd3, 0x3b, 0x00, 0x6f, 0x0e, 0x78, 0xe8, 0x07, 0xc7, 0x16, 0x29, 0xe1, 0x97,
	0xd2, 0xc7, 0x9f, 0x83, 0x40, 0x73, 0x88, 0x46, 0xdb, 0x37, 0x27, 0x8d, 0x6c, 0x99, 0x12, 0xbe,
	0xcd, 0x59, 0x16, 0x16, 0x66, 0xf3, 0xf8, 0xac, 0x9a, 0x7c, 0xf9, 0x1f, 0xa4, 0x1c, 0x56, 0xda,
	0x28, 0xf5, 0xc5, 0xd6, 0x29, 0xe1, 0x9b, 0x9c, 0x9e, 0x1b, 0x55, 0xb8, 0xb0, 0xf6, 0x8e, 0x9c,
	0x02, 0xbb, 0x07, 0x88, 0xce, 0x6d, 0xba, 0x81, 0x48, 0x8a, 0x42, 0x94, 0xef, 0x22, 0xb9, 0x98,
	0xa1, 0x6e, 0x12, 0xe2, 0xa1, 0x29, 0x2b, 0xf1, 0xb6, 0x6f, 0x92, 0x85, 0x87, 0xe2, 0x45, 0x3c,
	0xbe, 0xee, 0xeb, 0x64, 0xf9, 0xb9, 0x0e, 0xdf, 0xde, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0xc0,
	0x85, 0x10, 0x72, 0x14, 0x01, 0x00, 0x00,
}
