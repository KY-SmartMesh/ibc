// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: queue.proto

package types

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type QueueName_Purpose int32

const (
	QueueName_SEND    QueueName_Purpose = 0
	QueueName_RECEIPT QueueName_Purpose = 1
)

var QueueName_Purpose_name = map[int32]string{
	0: "SEND",
	1: "RECEIPT",
}
var QueueName_Purpose_value = map[string]int32{
	"SEND":    0,
	"RECEIPT": 1,
}

func (x QueueName_Purpose) String() string {
	return proto.EnumName(QueueName_Purpose_name, int32(x))
}
func (QueueName_Purpose) EnumDescriptor() ([]byte, []int) { return fileDescriptorQueue, []int{0, 0} }

// both encode into one byte with varint encoding
// never clash with 8 byte message indexes
type StateKey_State int32

const (
	StateKey_HEAD StateKey_State = 0
	StateKey_TAIL StateKey_State = 127
)

var StateKey_State_name = map[int32]string{
	0:   "HEAD",
	127: "TAIL",
}
var StateKey_State_value = map[string]int32{
	"HEAD": 0,
	"TAIL": 127,
}

func (x StateKey_State) String() string {
	return proto.EnumName(StateKey_State_name, int32(x))
}
func (StateKey_State) EnumDescriptor() ([]byte, []int) { return fileDescriptorQueue, []int{1, 0} }

type QueueName struct {
	// chain_id is which chain this queue is
	// associated with
	ChainId string            `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Purpose QueueName_Purpose `protobuf:"varint,2,opt,name=purpose,proto3,enum=types.QueueName_Purpose" json:"purpose,omitempty"`
}

func (m *QueueName) Reset()                    { *m = QueueName{} }
func (m *QueueName) String() string            { return proto.CompactTextString(m) }
func (*QueueName) ProtoMessage()               {}
func (*QueueName) Descriptor() ([]byte, []int) { return fileDescriptorQueue, []int{0} }

func (m *QueueName) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *QueueName) GetPurpose() QueueName_Purpose {
	if m != nil {
		return m.Purpose
	}
	return QueueName_SEND
}

// StateKey is a key for the head/tail of a given queue
type StateKey struct {
	Queue *QueueName     `protobuf:"bytes,1,opt,name=queue" json:"queue,omitempty"`
	State StateKey_State `protobuf:"varint,2,opt,name=state,proto3,enum=types.StateKey_State" json:"state,omitempty"`
}

func (m *StateKey) Reset()                    { *m = StateKey{} }
func (m *StateKey) String() string            { return proto.CompactTextString(m) }
func (*StateKey) ProtoMessage()               {}
func (*StateKey) Descriptor() ([]byte, []int) { return fileDescriptorQueue, []int{1} }

func (m *StateKey) GetQueue() *QueueName {
	if m != nil {
		return m.Queue
	}
	return nil
}

func (m *StateKey) GetState() StateKey_State {
	if m != nil {
		return m.State
	}
	return StateKey_HEAD
}

// StateValue is the type stored under a StateKey
type StateValue struct {
	Index uint64 `protobuf:"fixed64,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *StateValue) Reset()                    { *m = StateValue{} }
func (m *StateValue) String() string            { return proto.CompactTextString(m) }
func (*StateValue) ProtoMessage()               {}
func (*StateValue) Descriptor() ([]byte, []int) { return fileDescriptorQueue, []int{2} }

func (m *StateValue) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

// MessageKey is the key for message *index* in a given queue
type MessageKey struct {
	Queue *QueueName `protobuf:"bytes,1,opt,name=queue" json:"queue,omitempty"`
	Index uint64     `protobuf:"fixed64,2,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *MessageKey) Reset()                    { *m = MessageKey{} }
func (m *MessageKey) String() string            { return proto.CompactTextString(m) }
func (*MessageKey) ProtoMessage()               {}
func (*MessageKey) Descriptor() ([]byte, []int) { return fileDescriptorQueue, []int{3} }

func (m *MessageKey) GetQueue() *QueueName {
	if m != nil {
		return m.Queue
	}
	return nil
}

func (m *MessageKey) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

// SendValue is stored under a MessageKey in the SEND queue
type SendValue struct {
	MaxHeight uint64                     `protobuf:"varint,1,opt,name=maxHeight,proto3" json:"maxHeight,omitempty"`
	MaxTime   *google_protobuf.Timestamp `protobuf:"bytes,2,opt,name=maxTime" json:"maxTime,omitempty"`
	// use kind instead of type to avoid keyword conflict
	Kind []byte `protobuf:"bytes,3,opt,name=kind,proto3" json:"kind,omitempty"`
	Data []byte `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *SendValue) Reset()                    { *m = SendValue{} }
func (m *SendValue) String() string            { return proto.CompactTextString(m) }
func (*SendValue) ProtoMessage()               {}
func (*SendValue) Descriptor() ([]byte, []int) { return fileDescriptorQueue, []int{4} }

func (m *SendValue) GetMaxHeight() uint64 {
	if m != nil {
		return m.MaxHeight
	}
	return 0
}

func (m *SendValue) GetMaxTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.MaxTime
	}
	return nil
}

func (m *SendValue) GetKind() []byte {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (m *SendValue) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// ReceiptValue is stored under a MessageKey in the RECEIPT queue
type ReceiptValue struct {
	// 0 is success, others are application-defined errors
	ErrorCode int32 `protobuf:"varint,1,opt,name=errorCode,proto3" json:"errorCode,omitempty"`
	// contains result on success, optional info on error
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *ReceiptValue) Reset()                    { *m = ReceiptValue{} }
func (m *ReceiptValue) String() string            { return proto.CompactTextString(m) }
func (*ReceiptValue) ProtoMessage()               {}
func (*ReceiptValue) Descriptor() ([]byte, []int) { return fileDescriptorQueue, []int{5} }

func (m *ReceiptValue) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *ReceiptValue) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*QueueName)(nil), "types.QueueName")
	proto.RegisterType((*StateKey)(nil), "types.StateKey")
	proto.RegisterType((*StateValue)(nil), "types.StateValue")
	proto.RegisterType((*MessageKey)(nil), "types.MessageKey")
	proto.RegisterType((*SendValue)(nil), "types.SendValue")
	proto.RegisterType((*ReceiptValue)(nil), "types.ReceiptValue")
	proto.RegisterEnum("types.QueueName_Purpose", QueueName_Purpose_name, QueueName_Purpose_value)
	proto.RegisterEnum("types.StateKey_State", StateKey_State_name, StateKey_State_value)
}

func init() { proto.RegisterFile("queue.proto", fileDescriptorQueue) }

var fileDescriptorQueue = []byte{
	// 378 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x51, 0x5d, 0xab, 0xd3, 0x40,
	0x10, 0x35, 0x35, 0xb9, 0x49, 0x26, 0x17, 0x09, 0x8b, 0x42, 0xbc, 0x0a, 0x86, 0x7d, 0x90, 0x82,
	0x90, 0x0b, 0xd1, 0x1f, 0x60, 0xa9, 0x81, 0xd6, 0x8f, 0x52, 0xb7, 0xc1, 0x57, 0xd9, 0x36, 0x63,
	0xba, 0xd8, 0x7c, 0x98, 0x6c, 0xa0, 0x85, 0x82, 0x8f, 0xfe, 0x6d, 0xc9, 0x6e, 0x93, 0x8a, 0x6f,
	0xf7, 0x6d, 0xe6, 0xcc, 0x99, 0x73, 0xce, 0x30, 0xe0, 0xfd, 0xea, 0xb0, 0xc3, 0xa8, 0x6e, 0x2a,
	0x59, 0x11, 0x4b, 0x9e, 0x6a, 0x6c, 0xef, 0x5e, 0xe5, 0x55, 0x95, 0x1f, 0xf0, 0x5e, 0x81, 0xdb,
	0xee, 0xc7, 0xbd, 0x14, 0x05, 0xb6, 0x92, 0x17, 0xb5, 0xe6, 0xd1, 0x33, 0xb8, 0x5f, 0xfb, 0xb5,
	0x15, 0x2f, 0x90, 0x3c, 0x07, 0x67, 0xb7, 0xe7, 0xa2, 0xfc, 0x2e, 0xb2, 0xc0, 0x08, 0x8d, 0xa9,
	0xcb, 0x6c, 0xd5, 0x2f, 0x33, 0x12, 0x83, 0x5d, 0x77, 0x4d, 0x5d, 0xb5, 0x18, 0x4c, 0x42, 0x63,
	0xfa, 0x24, 0x0e, 0x22, 0xe5, 0x10, 0x8d, 0xdb, 0xd1, 0x5a, 0xcf, 0xd9, 0x40, 0xa4, 0x21, 0xd8,
	0x17, 0x8c, 0x38, 0x60, 0x6e, 0x92, 0xd5, 0x07, 0xff, 0x11, 0xf1, 0xc0, 0x66, 0xc9, 0x3c, 0x59,
	0xae, 0x53, 0xdf, 0xa0, 0x67, 0x70, 0x36, 0x92, 0x4b, 0xfc, 0x84, 0x27, 0xf2, 0x1a, 0x2c, 0x75,
	0x80, 0x72, 0xf6, 0x62, 0xff, 0x7f, 0x7d, 0xa6, 0xc7, 0xe4, 0x0d, 0x58, 0x6d, 0xbf, 0x73, 0xc9,
	0xf1, 0xec, 0xc2, 0x1b, 0x74, 0x74, 0xc1, 0x34, 0x87, 0xbe, 0x00, 0x4b, 0xf5, 0x7d, 0x80, 0x45,
	0x32, 0xeb, 0x03, 0x38, 0x60, 0xa6, 0xb3, 0xe5, 0x67, 0xff, 0x37, 0xa5, 0x00, 0x6a, 0xf8, 0x8d,
	0x1f, 0x3a, 0x24, 0x4f, 0xc1, 0x12, 0x65, 0x86, 0x47, 0xe5, 0x7f, 0xc3, 0x74, 0x43, 0x3f, 0x02,
	0x7c, 0xc1, 0xb6, 0xe5, 0xf9, 0x83, 0x32, 0x8e, 0x5a, 0x93, 0x7f, 0xb5, 0xfe, 0x18, 0xe0, 0x6e,
	0xb0, 0xcc, 0xb4, 0xdf, 0x4b, 0x70, 0x0b, 0x7e, 0x5c, 0xa0, 0xc8, 0xf7, 0x52, 0xe9, 0x99, 0xec,
	0x0a, 0x90, 0x77, 0x60, 0x17, 0xfc, 0x98, 0x8a, 0x42, 0xdf, 0xe9, 0xc5, 0x77, 0x91, 0x7e, 0x65,
	0x34, 0xbc, 0x32, 0x4a, 0x87, 0x57, 0xb2, 0x81, 0x4a, 0x08, 0x98, 0x3f, 0x45, 0x99, 0x05, 0x8f,
	0x43, 0x63, 0x7a, 0xcb, 0x54, 0xdd, 0x63, 0x19, 0x97, 0x3c, 0x30, 0x35, 0xd6, 0xd7, 0xf4, 0x3d,
	0xdc, 0x32, 0xdc, 0xa1, 0xa8, 0xe5, 0x98, 0x05, 0x9b, 0xa6, 0x6a, 0xe6, 0x55, 0xa6, 0x6f, 0xb3,
	0xd8, 0x15, 0x18, 0x15, 0x26, 0x57, 0x85, 0xed, 0x8d, 0x8a, 0xf1, 0xf6, 0x6f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x56, 0xf4, 0x95, 0xd7, 0x75, 0x02, 0x00, 0x00,
}
