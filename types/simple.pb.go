// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: simple.proto

package types

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// SubStore contains the name and root hash for a substore
type SubStore struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Root []byte `protobuf:"bytes,2,opt,name=root,proto3" json:"root,omitempty"`
}

func (m *SubStore) Reset()                    { *m = SubStore{} }
func (m *SubStore) String() string            { return proto.CompactTextString(m) }
func (*SubStore) ProtoMessage()               {}
func (*SubStore) Descriptor() ([]byte, []int) { return fileDescriptorSimple, []int{0} }

func (m *SubStore) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SubStore) GetRoot() []byte {
	if m != nil {
		return m.Root
	}
	return nil
}

// SimpleStep is an inner node between SubStore and the
// MultiStore root
type SimpleStep struct {
	Left  []byte `protobuf:"bytes,1,opt,name=left,proto3" json:"left,omitempty"`
	Right []byte `protobuf:"bytes,2,opt,name=right,proto3" json:"right,omitempty"`
}

func (m *SimpleStep) Reset()                    { *m = SimpleStep{} }
func (m *SimpleStep) String() string            { return proto.CompactTextString(m) }
func (*SimpleStep) ProtoMessage()               {}
func (*SimpleStep) Descriptor() ([]byte, []int) { return fileDescriptorSimple, []int{1} }

func (m *SimpleStep) GetLeft() []byte {
	if m != nil {
		return m.Left
	}
	return nil
}

func (m *SimpleStep) GetRight() []byte {
	if m != nil {
		return m.Right
	}
	return nil
}

// StoreProof is a merkle proof from a SubStore root
// up to the MultiStore root
type StoreProof struct {
	Root  []byte        `protobuf:"bytes,1,opt,name=root,proto3" json:"root,omitempty"`
	Path  []*SimpleStep `protobuf:"bytes,2,rep,name=path" json:"path,omitempty"`
	Store *SubStore     `protobuf:"bytes,3,opt,name=store" json:"store,omitempty"`
}

func (m *StoreProof) Reset()                    { *m = StoreProof{} }
func (m *StoreProof) String() string            { return proto.CompactTextString(m) }
func (*StoreProof) ProtoMessage()               {}
func (*StoreProof) Descriptor() ([]byte, []int) { return fileDescriptorSimple, []int{2} }

func (m *StoreProof) GetRoot() []byte {
	if m != nil {
		return m.Root
	}
	return nil
}

func (m *StoreProof) GetPath() []*SimpleStep {
	if m != nil {
		return m.Path
	}
	return nil
}

func (m *StoreProof) GetStore() *SubStore {
	if m != nil {
		return m.Store
	}
	return nil
}

// MultiStoreProof is two part proof from a leaf to a substore
// root, then the substore to the multistore root.
//
// Note that we must assert route.store.root == data.root
// to use this safely. (And generally route.store.name == "ibc")
type MultiStoreProof struct {
	Route *StoreProof     `protobuf:"bytes,1,opt,name=route" json:"route,omitempty"`
	Data  *KeyExistsProof `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
}

func (m *MultiStoreProof) Reset()                    { *m = MultiStoreProof{} }
func (m *MultiStoreProof) String() string            { return proto.CompactTextString(m) }
func (*MultiStoreProof) ProtoMessage()               {}
func (*MultiStoreProof) Descriptor() ([]byte, []int) { return fileDescriptorSimple, []int{3} }

func (m *MultiStoreProof) GetRoute() *StoreProof {
	if m != nil {
		return m.Route
	}
	return nil
}

func (m *MultiStoreProof) GetData() *KeyExistsProof {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*SubStore)(nil), "types.SubStore")
	proto.RegisterType((*SimpleStep)(nil), "types.SimpleStep")
	proto.RegisterType((*StoreProof)(nil), "types.StoreProof")
	proto.RegisterType((*MultiStoreProof)(nil), "types.MultiStoreProof")
}

func init() { proto.RegisterFile("simple.proto", fileDescriptorSimple) }

var fileDescriptorSimple = []byte{
	// 245 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0x41, 0x6b, 0x83, 0x40,
	0x10, 0x85, 0xd9, 0x44, 0x4b, 0x3b, 0x0a, 0xa1, 0x4b, 0x0b, 0xd2, 0x93, 0x08, 0xa1, 0xf6, 0xe2,
	0xc1, 0x42, 0xff, 0x41, 0x4f, 0xa5, 0x50, 0xd6, 0x5f, 0x60, 0xe8, 0xa4, 0x91, 0x6a, 0x66, 0xd9,
	0x1d, 0xa1, 0xf9, 0xf7, 0xc5, 0xd9, 0x98, 0x78, 0x1b, 0xe7, 0x7d, 0xf3, 0x9e, 0x6f, 0x21, 0xf5,
	0xdd, 0x60, 0x7b, 0xac, 0xac, 0x23, 0x26, 0x1d, 0xf3, 0xc9, 0xa2, 0x7f, 0x4a, 0x07, 0x74, 0xbf,
	0xf3, 0xb2, 0xa8, 0xe1, 0xb6, 0x19, 0x77, 0x0d, 0x93, 0x43, 0xad, 0x21, 0x3a, 0xb6, 0x03, 0x66,
	0x2a, 0x57, 0xe5, 0x9d, 0x91, 0x79, 0xda, 0x39, 0x22, 0xce, 0x56, 0xb9, 0x2a, 0x53, 0x23, 0x73,
	0xf1, 0x06, 0xd0, 0x88, 0x71, 0xc3, 0x68, 0x27, 0xa2, 0xc7, 0x3d, 0xcb, 0x55, 0x6a, 0x64, 0xd6,
	0x0f, 0x10, 0xbb, 0xee, 0xe7, 0x30, 0x9f, 0x85, 0x8f, 0xe2, 0x08, 0x20, 0x41, 0x5f, 0x8e, 0x68,
	0x7f, 0x71, 0x56, 0x57, 0x67, 0xbd, 0x85, 0xc8, 0xb6, 0x7c, 0xc8, 0x56, 0xf9, 0xba, 0x4c, 0xea,
	0xfb, 0x4a, 0xfe, 0xb8, 0xba, 0x86, 0x19, 0x91, 0xf5, 0x16, 0x62, 0x3f, 0x19, 0x65, 0xeb, 0x5c,
	0x95, 0x49, 0xbd, 0x99, 0xb9, 0x73, 0x11, 0x13, 0xd4, 0x02, 0x61, 0xf3, 0x39, 0xf6, 0xdc, 0x2d,
	0x42, 0x9f, 0x21, 0x76, 0x34, 0x72, 0xe8, 0xb8, 0x48, 0xb8, 0x10, 0x26, 0xe8, 0xfa, 0x05, 0xa2,
	0xef, 0x96, 0x5b, 0x29, 0x90, 0xd4, 0x8f, 0x67, 0xee, 0x03, 0x4f, 0xef, 0x7f, 0x9d, 0x67, 0x1f,
	0x58, 0x41, 0x76, 0x37, 0xf2, 0x92, 0xaf, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0x65, 0xa5, 0x20,
	0x21, 0x6e, 0x01, 0x00, 0x00,
}
