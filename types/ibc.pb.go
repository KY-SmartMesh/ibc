// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ibc.proto

/*
Package types is a generated protocol buffer package.

It is generated from these files:
	ibc.proto
	merkle.proto
	simple.proto

It has these top-level messages:
	QueueName
	StateKey
	StateValue
	MessageKey
	SendValue
	ReceiptValue
	IBCPacket
	LeafNode
	ProofInnerNode
	PathWithNode
	KeyExistsProof
	KeyAbsentProof
	SubStore
	SimpleStep
	StoreProof
	MultiStoreProof
*/
package types

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type QueueName_Purpose int32

const (
	QueueName_SEND    QueueName_Purpose = 0
	QueueName_RECEIPT QueueName_Purpose = 1
)

var QueueName_Purpose_name = map[int32]string{
	0: "SEND",
	1: "RECEIPT",
}
var QueueName_Purpose_value = map[string]int32{
	"SEND":    0,
	"RECEIPT": 1,
}

func (x QueueName_Purpose) String() string {
	return proto.EnumName(QueueName_Purpose_name, int32(x))
}
func (QueueName_Purpose) EnumDescriptor() ([]byte, []int) { return fileDescriptorIbc, []int{0, 0} }

// both encode into one byte with varint encoding
// never clash with 8 byte message indexes
type StateKey_State int32

const (
	StateKey_HEAD StateKey_State = 0
	StateKey_TAIL StateKey_State = 127
)

var StateKey_State_name = map[int32]string{
	0:   "HEAD",
	127: "TAIL",
}
var StateKey_State_value = map[string]int32{
	"HEAD": 0,
	"TAIL": 127,
}

func (x StateKey_State) String() string {
	return proto.EnumName(StateKey_State_name, int32(x))
}
func (StateKey_State) EnumDescriptor() ([]byte, []int) { return fileDescriptorIbc, []int{1, 0} }

type QueueName struct {
	// chain_id is which chain this queue is
	// associated with
	ChainId string            `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Purpose QueueName_Purpose `protobuf:"varint,2,opt,name=purpose,proto3,enum=types.QueueName_Purpose" json:"purpose,omitempty"`
}

func (m *QueueName) Reset()                    { *m = QueueName{} }
func (m *QueueName) String() string            { return proto.CompactTextString(m) }
func (*QueueName) ProtoMessage()               {}
func (*QueueName) Descriptor() ([]byte, []int) { return fileDescriptorIbc, []int{0} }

func (m *QueueName) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *QueueName) GetPurpose() QueueName_Purpose {
	if m != nil {
		return m.Purpose
	}
	return QueueName_SEND
}

// StateKey is a key for the head/tail of a given queue
type StateKey struct {
	Queue *QueueName     `protobuf:"bytes,1,opt,name=queue" json:"queue,omitempty"`
	State StateKey_State `protobuf:"varint,2,opt,name=state,proto3,enum=types.StateKey_State" json:"state,omitempty"`
}

func (m *StateKey) Reset()                    { *m = StateKey{} }
func (m *StateKey) String() string            { return proto.CompactTextString(m) }
func (*StateKey) ProtoMessage()               {}
func (*StateKey) Descriptor() ([]byte, []int) { return fileDescriptorIbc, []int{1} }

func (m *StateKey) GetQueue() *QueueName {
	if m != nil {
		return m.Queue
	}
	return nil
}

func (m *StateKey) GetState() StateKey_State {
	if m != nil {
		return m.State
	}
	return StateKey_HEAD
}

// StateValue is the type stored under a StateKey
type StateValue struct {
	Index uint64 `protobuf:"fixed64,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *StateValue) Reset()                    { *m = StateValue{} }
func (m *StateValue) String() string            { return proto.CompactTextString(m) }
func (*StateValue) ProtoMessage()               {}
func (*StateValue) Descriptor() ([]byte, []int) { return fileDescriptorIbc, []int{2} }

func (m *StateValue) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

// MessageKey is the key for message *index* in a given queue
type MessageKey struct {
	Queue *QueueName `protobuf:"bytes,1,opt,name=queue" json:"queue,omitempty"`
	Index uint64     `protobuf:"fixed64,2,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *MessageKey) Reset()                    { *m = MessageKey{} }
func (m *MessageKey) String() string            { return proto.CompactTextString(m) }
func (*MessageKey) ProtoMessage()               {}
func (*MessageKey) Descriptor() ([]byte, []int) { return fileDescriptorIbc, []int{3} }

func (m *MessageKey) GetQueue() *QueueName {
	if m != nil {
		return m.Queue
	}
	return nil
}

func (m *MessageKey) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

// SendValue is stored under a MessageKey in the SEND queue
type SendValue struct {
	MaxHeight uint64                     `protobuf:"varint,1,opt,name=maxHeight,proto3" json:"maxHeight,omitempty"`
	MaxTime   *google_protobuf.Timestamp `protobuf:"bytes,2,opt,name=maxTime" json:"maxTime,omitempty"`
	// use kind instead of type to avoid keyword conflict
	Kind []byte `protobuf:"bytes,3,opt,name=kind,proto3" json:"kind,omitempty"`
	Data []byte `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *SendValue) Reset()                    { *m = SendValue{} }
func (m *SendValue) String() string            { return proto.CompactTextString(m) }
func (*SendValue) ProtoMessage()               {}
func (*SendValue) Descriptor() ([]byte, []int) { return fileDescriptorIbc, []int{4} }

func (m *SendValue) GetMaxHeight() uint64 {
	if m != nil {
		return m.MaxHeight
	}
	return 0
}

func (m *SendValue) GetMaxTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.MaxTime
	}
	return nil
}

func (m *SendValue) GetKind() []byte {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (m *SendValue) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// ReceiptValue is stored under a MessageKey in the RECEIPT queue
type ReceiptValue struct {
	// 0 is success, others are application-defined errors
	ErrorCode int32 `protobuf:"varint,1,opt,name=errorCode,proto3" json:"errorCode,omitempty"`
	// contains result on success, optional info on error
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *ReceiptValue) Reset()                    { *m = ReceiptValue{} }
func (m *ReceiptValue) String() string            { return proto.CompactTextString(m) }
func (*ReceiptValue) ProtoMessage()               {}
func (*ReceiptValue) Descriptor() ([]byte, []int) { return fileDescriptorIbc, []int{5} }

func (m *ReceiptValue) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *ReceiptValue) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// IBCPacket sends a merkle proof along with routing
// information. Depending on the key/value sent as part of
// the proof (proof.data.path.node.{key,value}), this packet
// can be interpretted as a send packet or a receipt.
//
// src_chain and src_height are used to identify the sender
// and look up the header with which to verify this packet.
// dest_chain is used for routing when the packet traverses
// multiple chains, and can be left blank when sending
// directly to the destination chain.
type IBCPacket struct {
	DestChain string           `protobuf:"bytes,1,opt,name=dest_chain,json=destChain,proto3" json:"dest_chain,omitempty"`
	SrcChain  string           `protobuf:"bytes,2,opt,name=src_chain,json=srcChain,proto3" json:"src_chain,omitempty"`
	SrcHeight uint64           `protobuf:"varint,3,opt,name=src_height,json=srcHeight,proto3" json:"src_height,omitempty"`
	Proof     *MultiStoreProof `protobuf:"bytes,4,opt,name=proof" json:"proof,omitempty"`
}

func (m *IBCPacket) Reset()                    { *m = IBCPacket{} }
func (m *IBCPacket) String() string            { return proto.CompactTextString(m) }
func (*IBCPacket) ProtoMessage()               {}
func (*IBCPacket) Descriptor() ([]byte, []int) { return fileDescriptorIbc, []int{6} }

func (m *IBCPacket) GetDestChain() string {
	if m != nil {
		return m.DestChain
	}
	return ""
}

func (m *IBCPacket) GetSrcChain() string {
	if m != nil {
		return m.SrcChain
	}
	return ""
}

func (m *IBCPacket) GetSrcHeight() uint64 {
	if m != nil {
		return m.SrcHeight
	}
	return 0
}

func (m *IBCPacket) GetProof() *MultiStoreProof {
	if m != nil {
		return m.Proof
	}
	return nil
}

func init() {
	proto.RegisterType((*QueueName)(nil), "types.QueueName")
	proto.RegisterType((*StateKey)(nil), "types.StateKey")
	proto.RegisterType((*StateValue)(nil), "types.StateValue")
	proto.RegisterType((*MessageKey)(nil), "types.MessageKey")
	proto.RegisterType((*SendValue)(nil), "types.SendValue")
	proto.RegisterType((*ReceiptValue)(nil), "types.ReceiptValue")
	proto.RegisterType((*IBCPacket)(nil), "types.IBCPacket")
	proto.RegisterEnum("types.QueueName_Purpose", QueueName_Purpose_name, QueueName_Purpose_value)
	proto.RegisterEnum("types.StateKey_State", StateKey_State_name, StateKey_State_value)
}

func init() { proto.RegisterFile("ibc.proto", fileDescriptorIbc) }

var fileDescriptorIbc = []byte{
	// 469 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0xd1, 0x6e, 0xd3, 0x30,
	0x14, 0x25, 0x5d, 0xb3, 0x24, 0xb7, 0x15, 0xaa, 0x2c, 0x40, 0xa1, 0x63, 0xa2, 0xca, 0x03, 0xaa,
	0x04, 0xca, 0xa4, 0xc0, 0x07, 0x30, 0x4a, 0xa5, 0x15, 0xd8, 0x54, 0xdc, 0x8a, 0xd7, 0xc9, 0x4d,
	0xee, 0x5a, 0x6b, 0x4d, 0x1d, 0x6c, 0x47, 0xea, 0xa4, 0x49, 0x3c, 0xf2, 0x03, 0x7c, 0x30, 0xb2,
	0x9d, 0x74, 0x13, 0x6f, 0xbc, 0xf9, 0x9e, 0x73, 0x7c, 0xee, 0xf1, 0xbd, 0x86, 0x88, 0xaf, 0xf2,
	0xb4, 0x92, 0x42, 0x0b, 0xe2, 0xeb, 0xbb, 0x0a, 0xd5, 0xb0, 0xaf, 0x78, 0x59, 0x6d, 0xd1, 0x81,
	0xc3, 0xd7, 0x6b, 0x21, 0xd6, 0x5b, 0x3c, 0xb3, 0xd5, 0xaa, 0xbe, 0x39, 0xd3, 0xbc, 0x44, 0xa5,
	0x59, 0x59, 0x39, 0x41, 0x72, 0x0f, 0xd1, 0xf7, 0x1a, 0x6b, 0xbc, 0x62, 0x25, 0x92, 0x97, 0x10,
	0xe6, 0x1b, 0xc6, 0x77, 0xd7, 0xbc, 0x88, 0xbd, 0x91, 0x37, 0x8e, 0x68, 0x60, 0xeb, 0x59, 0x41,
	0x32, 0x08, 0xaa, 0x5a, 0x56, 0x42, 0x61, 0xdc, 0x19, 0x79, 0xe3, 0xa7, 0x59, 0x9c, 0xda, 0x7e,
	0xe9, 0xe1, 0x76, 0x3a, 0x77, 0x3c, 0x6d, 0x85, 0xc9, 0x08, 0x82, 0x06, 0x23, 0x21, 0x74, 0x17,
	0xd3, 0xab, 0xcf, 0x83, 0x27, 0xa4, 0x07, 0x01, 0x9d, 0x4e, 0xa6, 0xb3, 0xf9, 0x72, 0xe0, 0x25,
	0xf7, 0x10, 0x2e, 0x34, 0xd3, 0xf8, 0x15, 0xef, 0xc8, 0x1b, 0xf0, 0x7f, 0x1a, 0x2f, 0xdb, 0xb9,
	0x97, 0x0d, 0xfe, 0xf5, 0xa7, 0x8e, 0x26, 0x6f, 0xc1, 0x57, 0xe6, 0x4e, 0x93, 0xe3, 0x79, 0xa3,
	0x6b, 0x7d, 0xdc, 0x81, 0x3a, 0x4d, 0x72, 0x02, 0xbe, 0xad, 0x4d, 0x80, 0x8b, 0xe9, 0xb9, 0x09,
	0x10, 0x42, 0x77, 0x79, 0x3e, 0xfb, 0x36, 0xf8, 0x95, 0x24, 0x00, 0x96, 0xfc, 0xc1, 0xb6, 0x35,
	0x92, 0x67, 0xe0, 0xf3, 0x5d, 0x81, 0x7b, 0xdb, 0xff, 0x98, 0xba, 0x22, 0xf9, 0x02, 0x70, 0x89,
	0x4a, 0xb1, 0xf5, 0x7f, 0x65, 0x3c, 0x78, 0x75, 0x1e, 0x7b, 0xfd, 0xf6, 0x20, 0x5a, 0xe0, 0xae,
	0x70, 0xfd, 0x5e, 0x41, 0x54, 0xb2, 0xfd, 0x05, 0xf2, 0xf5, 0x46, 0x5b, 0xbf, 0x2e, 0x7d, 0x00,
	0xc8, 0x07, 0x08, 0x4a, 0xb6, 0x5f, 0xf2, 0xd2, 0xbd, 0xb3, 0x97, 0x0d, 0x53, 0xb7, 0xca, 0xb4,
	0x5d, 0x65, 0xba, 0x6c, 0x57, 0x49, 0x5b, 0x29, 0x21, 0xd0, 0xbd, 0xe5, 0xbb, 0x22, 0x3e, 0x1a,
	0x79, 0xe3, 0x3e, 0xb5, 0x67, 0x83, 0x15, 0x4c, 0xb3, 0xb8, 0xeb, 0x30, 0x73, 0x4e, 0x3e, 0x42,
	0x9f, 0x62, 0x8e, 0xbc, 0xd2, 0x87, 0x2c, 0x28, 0xa5, 0x90, 0x13, 0x51, 0xb8, 0xb7, 0xf9, 0xf4,
	0x01, 0x38, 0x38, 0x74, 0x1e, 0x39, 0xfc, 0xf1, 0x20, 0x9a, 0x7d, 0x9a, 0xcc, 0x59, 0x7e, 0x8b,
	0x9a, 0x9c, 0x02, 0x14, 0xa8, 0xf4, 0xb5, 0xfd, 0x2d, 0xcd, 0xd7, 0x89, 0x0c, 0x32, 0x31, 0x00,
	0x39, 0x81, 0x48, 0xc9, 0xbc, 0x61, 0x3b, 0x96, 0x0d, 0x95, 0xcc, 0x1d, 0x79, 0x0a, 0x60, 0xc8,
	0x8d, 0x1b, 0xc4, 0x91, 0x1b, 0x84, 0x92, 0x79, 0x33, 0x88, 0x77, 0xe0, 0x57, 0x52, 0x88, 0x1b,
	0x9b, 0xbf, 0x97, 0xbd, 0x68, 0x46, 0x7e, 0x59, 0x6f, 0x35, 0x5f, 0x68, 0x21, 0x71, 0x6e, 0x58,
	0xea, 0x44, 0xab, 0x63, 0x3b, 0x9d, 0xf7, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x46, 0x43, 0x30,
	0x7a, 0x18, 0x03, 0x00, 0x00,
}
