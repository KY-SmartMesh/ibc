// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: merkle.proto

/*
Package types is a generated protocol buffer package.

It is generated from these files:
	merkle.proto

It has these top-level messages:
	LeafNode
	ProofInnerNode
	PathWithNode
	KeyExistsProof
	KeyAbsentProof
*/
package types

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// LeafNode contains the key/value pair to prove
type LeafNode struct {
	Key     []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value   []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Version uint64 `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *LeafNode) Reset()                    { *m = LeafNode{} }
func (m *LeafNode) String() string            { return proto.CompactTextString(m) }
func (*LeafNode) ProtoMessage()               {}
func (*LeafNode) Descriptor() ([]byte, []int) { return fileDescriptorMerkle, []int{0} }

func (m *LeafNode) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *LeafNode) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *LeafNode) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

// ProofInnerNode contains a step on the path from leaf to root
//
// Only one of left/right will be defined (the path not taken),
// the other one will be empty and should be filled with the
// value of the
type ProofInnerNode struct {
	Height uint32 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Size_  uint64 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Left   []byte `protobuf:"bytes,3,opt,name=left,proto3" json:"left,omitempty"`
	Right  []byte `protobuf:"bytes,4,opt,name=right,proto3" json:"right,omitempty"`
}

func (m *ProofInnerNode) Reset()                    { *m = ProofInnerNode{} }
func (m *ProofInnerNode) String() string            { return proto.CompactTextString(m) }
func (*ProofInnerNode) ProtoMessage()               {}
func (*ProofInnerNode) Descriptor() ([]byte, []int) { return fileDescriptorMerkle, []int{1} }

func (m *ProofInnerNode) GetHeight() uint32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *ProofInnerNode) GetSize_() uint64 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func (m *ProofInnerNode) GetLeft() []byte {
	if m != nil {
		return m.Left
	}
	return nil
}

func (m *ProofInnerNode) GetRight() []byte {
	if m != nil {
		return m.Right
	}
	return nil
}

// PathWithNode is the entire set of proofs from leaf data to
// root hash, but not including the root hash, as we may want
// to path multiple paths together for eg. key missing or range
// proofs.
type PathWithNode struct {
	Path []*ProofInnerNode `protobuf:"bytes,1,rep,name=path" json:"path,omitempty"`
	Node *LeafNode         `protobuf:"bytes,2,opt,name=node" json:"node,omitempty"`
}

func (m *PathWithNode) Reset()                    { *m = PathWithNode{} }
func (m *PathWithNode) String() string            { return proto.CompactTextString(m) }
func (*PathWithNode) ProtoMessage()               {}
func (*PathWithNode) Descriptor() ([]byte, []int) { return fileDescriptorMerkle, []int{2} }

func (m *PathWithNode) GetPath() []*ProofInnerNode {
	if m != nil {
		return m.Path
	}
	return nil
}

func (m *PathWithNode) GetNode() *LeafNode {
	if m != nil {
		return m.Node
	}
	return nil
}

// KeyExistsProof combines the proof of a given leaf node along
// with the root hash it should match. This must be calculated
// to verify, but the root hash first can be used to locate the
// needed header before running the proof verification.
type KeyExistsProof struct {
	Root []byte        `protobuf:"bytes,1,opt,name=root,proto3" json:"root,omitempty"`
	Path *PathWithNode `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
}

func (m *KeyExistsProof) Reset()                    { *m = KeyExistsProof{} }
func (m *KeyExistsProof) String() string            { return proto.CompactTextString(m) }
func (*KeyExistsProof) ProtoMessage()               {}
func (*KeyExistsProof) Descriptor() ([]byte, []int) { return fileDescriptorMerkle, []int{3} }

func (m *KeyExistsProof) GetRoot() []byte {
	if m != nil {
		return m.Root
	}
	return nil
}

func (m *KeyExistsProof) GetPath() *PathWithNode {
	if m != nil {
		return m.Path
	}
	return nil
}

// KeyAbsentProof represents a proof of the absence of a
// single key.
//
// left must be less than the missing key and right must be
// greater than the missing key.
// left and right must be adjacent paths (or leftmost/nil or
// nil/rightmost).
// this proves there is nothing between left and right, so key
// must not exist in the tree.
type KeyAbsentProof struct {
	Root  []byte        `protobuf:"bytes,1,opt,name=root,proto3" json:"root,omitempty"`
	Left  *PathWithNode `protobuf:"bytes,2,opt,name=left" json:"left,omitempty"`
	Right *PathWithNode `protobuf:"bytes,3,opt,name=right" json:"right,omitempty"`
}

func (m *KeyAbsentProof) Reset()                    { *m = KeyAbsentProof{} }
func (m *KeyAbsentProof) String() string            { return proto.CompactTextString(m) }
func (*KeyAbsentProof) ProtoMessage()               {}
func (*KeyAbsentProof) Descriptor() ([]byte, []int) { return fileDescriptorMerkle, []int{4} }

func (m *KeyAbsentProof) GetRoot() []byte {
	if m != nil {
		return m.Root
	}
	return nil
}

func (m *KeyAbsentProof) GetLeft() *PathWithNode {
	if m != nil {
		return m.Left
	}
	return nil
}

func (m *KeyAbsentProof) GetRight() *PathWithNode {
	if m != nil {
		return m.Right
	}
	return nil
}

func init() {
	proto.RegisterType((*LeafNode)(nil), "LeafNode")
	proto.RegisterType((*ProofInnerNode)(nil), "ProofInnerNode")
	proto.RegisterType((*PathWithNode)(nil), "PathWithNode")
	proto.RegisterType((*KeyExistsProof)(nil), "KeyExistsProof")
	proto.RegisterType((*KeyAbsentProof)(nil), "KeyAbsentProof")
}

func init() { proto.RegisterFile("merkle.proto", fileDescriptorMerkle) }

var fileDescriptorMerkle = []byte{
	// 285 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0x41, 0x4b, 0xc3, 0x40,
	0x10, 0x85, 0x89, 0xd9, 0xb6, 0x3a, 0x4d, 0xab, 0x2c, 0x22, 0xb9, 0x08, 0x35, 0xbd, 0xe4, 0x94,
	0x43, 0xfd, 0x05, 0x0a, 0x22, 0x62, 0x91, 0xb2, 0x17, 0xc1, 0x5b, 0x4a, 0x27, 0x26, 0x34, 0xee,
	0x86, 0xdd, 0xb1, 0x18, 0x7f, 0xbd, 0x64, 0x36, 0x01, 0x85, 0xe2, 0x6d, 0xde, 0x6c, 0xf6, 0x7b,
	0xef, 0x65, 0x21, 0xfa, 0x40, 0xbb, 0xaf, 0x31, 0x6b, 0xac, 0x21, 0x93, 0xac, 0xe1, 0x74, 0x8d,
	0x79, 0xf1, 0x62, 0x76, 0x28, 0x2f, 0x20, 0xdc, 0x63, 0x1b, 0x07, 0x8b, 0x20, 0x8d, 0x54, 0x37,
	0xca, 0x4b, 0x18, 0x1d, 0xf2, 0xfa, 0x13, 0xe3, 0x13, 0xde, 0x79, 0x21, 0x63, 0x98, 0x1c, 0xd0,
	0xba, 0xca, 0xe8, 0x38, 0x5c, 0x04, 0xa9, 0x50, 0x83, 0x4c, 0x0a, 0x98, 0x6f, 0xac, 0x31, 0xc5,
	0x93, 0xd6, 0x68, 0x99, 0x79, 0x05, 0xe3, 0x12, 0xab, 0xf7, 0x92, 0x18, 0x3b, 0x53, 0xbd, 0x92,
	0x12, 0x84, 0xab, 0xbe, 0x3d, 0x58, 0x28, 0x9e, 0xbb, 0x5d, 0x8d, 0x05, 0x31, 0x34, 0x52, 0x3c,
	0x77, 0x09, 0x2c, 0x5f, 0x17, 0x3e, 0x01, 0x8b, 0x44, 0x41, 0xb4, 0xc9, 0xa9, 0x7c, 0xad, 0xa8,
	0x64, 0x97, 0x25, 0x88, 0x26, 0xa7, 0x32, 0x0e, 0x16, 0x61, 0x3a, 0x5d, 0x9d, 0x67, 0x7f, 0x43,
	0x28, 0x3e, 0x94, 0xd7, 0x20, 0xb4, 0xd9, 0x79, 0xcb, 0xe9, 0xea, 0x2c, 0x1b, 0x7a, 0x2b, 0x5e,
	0x27, 0x8f, 0x30, 0x7f, 0xc6, 0xf6, 0xe1, 0xab, 0x72, 0xe4, 0xf8, 0x7e, 0x97, 0xc7, 0x1a, 0x43,
	0xfd, 0x0f, 0xe1, 0x59, 0xde, 0xf4, 0x4e, 0x1e, 0x32, 0xcb, 0x7e, 0xc7, 0xf0, 0x3e, 0x49, 0xcd,
	0xa0, 0xbb, 0xad, 0x43, 0x4d, 0xff, 0x82, 0xb8, 0xec, 0x71, 0x10, 0x77, 0x5f, 0x0e, 0xdd, 0xc3,
	0x63, 0xdf, 0xf8, 0xb3, 0xfb, 0xc9, 0xdb, 0x88, 0xda, 0x06, 0xdd, 0x76, 0xcc, 0x0f, 0x7a, 0xfb,
	0x13, 0x00, 0x00, 0xff, 0xff, 0x1f, 0xc0, 0x6a, 0xae, 0xe0, 0x01, 0x00, 0x00,
}
